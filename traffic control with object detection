import cv2
import numpy as np
import glob
from skimage import io

#for time allocation
lanes=4
cl = [0]*4
ref_time = 85
ytime = 5
sum_of_cl = 0
j=0

# Load Yolo
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
classes = []
img_number =0
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]
layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]
colors = np.random.uniform(0, 255, size=(len(classes), 3))

file_list = glob.glob(r'pics/*.jpeg')
#print(file_list)
my_list = []

for file in file_list:
    img = cv2.imread(file)
    my_list.append(img)
    #print(my_list)
    img = cv2.resize(img, None, fx=0.4, fy=0.4)
    height, width, channels = img.shape
    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)
    class_ids = []
    confidences = []
    boxes = []
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)
    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
    font = cv2.FONT_HERSHEY_COMPLEX_SMALL
    vehicle_count = 0
    for i in range(min(len(boxes), len(colors))):
        if i in indexes:
            x, y, w, h = boxes[i]
            label = str(classes[class_ids[i]])
            if (label == 'motorbike' or label == 'car' or label == 'truck' or label == 'bus'):
                vehicle_count = vehicle_count + 1;
                color = colors[i]
                cv2.rectangle(img, (x, y), (x + w, y + h), color, 1)
                cv2.putText(img, label, (x, y + 30), font, 1, color, 1)
    print("Vehicle count: ", vehicle_count)
    if (lanes>0):
        cl[j]=vehicle_count
        lanes-=1
        j+=1
    cv2.imshow("Image", img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


#for time allocation

#1
def _allocation():
        sum_of_cl = sum(cl)
        print("\n\nTime allocation of signal for traffic :\n")
        if ((cl[0] == cl[1]) and (cl[1] == cl[2]) and (cl[2] == cl[3]) and (cl[3] == cl[0])):
            for i in range(4):
                print("Time allocated for yellow signal (displayed before green) for ",i+1," lane is : " + str(ytime) + "seconds")
                print("Duration of green signal for ", i + 1, " lane is : "+ str(ref_time) + "seconds\n")

        else:
            for i in range(4):
                alloc_time = ((cl[i] / sum_of_cl) * 340)
                if i == 0:
                    sum1 = ((cl[1] + cl[2] + cl[3]) / sum_of_cl) * 340
                    print("Time allocated for yellow signal (displayed before green) for ",i+1," lane is : " + str(ytime) + "seconds")
                    print("Duration of green signal for ", i + 1, " lane is : ", alloc_time, "seconds")
                    print("Duration of red signal for ", i + 1, " lane , after the flow : ", sum1, " seconds")
                elif i == 1:
                    sum2_bef = ((cl[0] / sum_of_cl) * 340)
                    sum2_aftr = ((cl[2] + cl[3]) / sum_of_cl) * 340
                    print("\n\nDuration of red signal before the flow : ", sum2_bef, " seconds")
                    print("Time allocated for yellow signal (displayed before green) for ",i+1," lane is : " + str(ytime) + "seconds")
                    print("Duration of green signal for ", i + 1, " lane is : ", alloc_time, "seconds")
                    print("Duration of red signal for ", i + 1, " lane , after the flow : ", sum2_aftr, " seconds")
                elif i == 2:
                    sum3_bef = ((cl[0] + cl[1]) / sum_of_cl) * 340
                    sum3_aftr = (cl[3] / sum_of_cl) * 340
                    print("\n\nDuration of red signal before the flow : ", sum3_bef, " seconds")
                    print("Time allocated for yellow signal (displayed before green) for ",i+1," lane is : " + str(ytime) + "seconds")
                    print("Duration of green signal for ", i + 1, " lane is : ", alloc_time, "seconds")
                    print("Duration of red signal for ", i + 1, " lane , after the flow : ", sum3_aftr, " seconds")
                elif i == 3:
                    sum4_bef = ((cl[0] + cl[1] + cl[2]) / sum_of_cl) * 340
                    print("\n\nDuration of red signal before the flow : ", sum4_bef, " seconds")
                    print("Time allocated for yellow signal (displayed before green) for ",i+1," lane is : " + str(ytime) + "seconds")
                    print("Duration of green signal for ", i + 1, " lane is : ", alloc_time, "seconds")

#2
def traffic_signal():
    for i in range(n):
        print("\ncycle ", i + 1)
        _allocation()

#main function
traffic_signal()
